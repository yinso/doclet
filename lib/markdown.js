// Generated by CoffeeScript 1.4.0
(function() {
  var front, loglet, marked, mockquery, newRenderer, parse, path, renderHTML, renderHeading, renderImage, renderLink, renderParagraph, _;

  marked = require('marked');

  front = require('yaml-front-matter');

  mockquery = require('mockquery');

  loglet = require('loglet');

  path = require('path');

  _ = require('underscore');

  renderHeading = function(renderer, filePath) {
    var baseID, headingIDRegex, slugify, stripID;
    slugify = function(text) {
      return text.toLowerCase().replace(/\s+/g, '-').replace(/\W+/g, '-');
    };
    headingIDRegex = /\s*\#*\s*\{\s*([^\s\}]+)\s*\}\s*/;
    stripID = function(text) {
      return text.replace(headingIDRegex, '');
    };
    baseID = function(text) {
      var fileID, match;
      match = text.match(headingIDRegex);
      loglet.debug('baseID.matched', match);
      if (match) {
        return match[1].replace(/^\#+/, '');
      } else {
        fileID = path.basename(filePath, path.extname(filePath));
        return slugify(fileID + ' ' + text);
      }
    };
    return function(text, level) {
      var doc, element, html, id, newText;
      text = mockquery.entities.decode(text);
      try {
        newText = stripID(text);
        id = baseID(text);
        element = {
          element: 'h' + level,
          attributes: {
            id: id
          },
          children: [newText]
        };
        doc = mockquery.Document.createElement(element);
        html = doc.outerHTML() + '\n';
        loglet.debug('renderer.heading', doc, text, level, newText, html);
        return html;
      } catch (e) {
        return loglet.error(e);
      }
    };
  };

  renderHTML = function(renderer, options) {
    var tableCount, tablePrefix;
    tableCount = 0;
    tablePrefix = function() {
      if ((options != null ? options.prefix : void 0) && (options != null ? options.number : void 0)) {
        tableCount++;
        return "" + options.prefix + " " + options.number + "." + tableCount + " - ";
      } else {
        return '';
      }
    };
    return function(html) {
      var $;
      $ = mockquery.load('<root>' + html + '</root>');
      $('[markdown="1"]').each(function(i, elt) {
        var inner, rendered;
        $(elt).removeAttr('markdown');
        inner = elt.html();
        rendered = marked(inner, {
          renderer: renderer
        });
        return elt.html(rendered);
      });
      $('table').each(function(i, elt) {
        var captions;
        $(elt).addClass('table');
        captions = $('caption', elt);
        if (captions.length > 1) {
          return captions.each(function(i, elt) {
            if (i === 0) {
              return $(elt).prepend(tablePrefix());
            } else {
              return $(elt).remove();
            }
          });
        }
      });
      return $('root').html();
    };
  };

  renderLink = function(renderer) {
    return function(href, title, text) {
      var $, element;
      loglet.debug('renderer.link', href, title, text);
      element = {
        element: 'a',
        attributes: {
          href: href,
          title: title
        },
        children: []
      };
      $ = mockquery.fromJSON(element);
      $('a').html(text);
      return $('a').outerHTML();
    };
  };

  renderImage = function(renderer, options) {
    var count, figurePrefix;
    count = 0;
    figurePrefix = function() {
      count++;
      if ((options != null ? options.prefix : void 0) && (options != null ? options.number : void 0)) {
        return options.prefix + " " + options.number + '.' + count + ' - ';
      } else {
        return '';
      }
    };
    return function(href, title, text) {
      var $, element;
      element = {
        element: 'figure',
        attributes: {},
        children: [
          {
            element: 'img',
            attributes: {
              src: href
            },
            children: []
          }, {
            element: 'figcaption',
            attributes: [],
            children: []
          }
        ]
      };
      $ = mockquery.fromJSON(element);
      $('figcaption').html(text);
      $('figcaption').prepend(figurePrefix());
      return $('figure').outerHTML();
    };
  };

  renderParagraph = function(renderer) {
    var dropcapRE, notInParaRE;
    dropcapRE = /^\s*<span\s+class\s*=\s"dropcap"*/i;
    notInParaRE = /^\s*<\s*(figure|caption|table|thead|th|tr|td)/i;
    return function(text) {
      if (text.match(dropcapRE)) {
        return text;
      } else if (text.match(notInParaRE)) {
        return text;
      } else {
        return "<p>" + text + "</p>";
      }
    };
  };

  newRenderer = function(filePath, parsed) {
    var renderer;
    renderer = new marked.Renderer();
    renderer.heading = renderHeading(renderer, filePath);
    renderer.html = renderHTML(renderer, parsed.number ? {
      number: parsed.number,
      prefix: 'Table'
    } : {});
    renderer.link = renderLink(renderer);
    renderer.image = renderImage(renderer, parsed.number ? {
      number: parsed.number,
      prefix: 'Figure'
    } : {});
    renderer.paragraph = renderParagraph(renderer);
    return renderer;
  };

  parse = function(file) {
    var content, parsed;
    parsed = _.extend(file.parsed || {}, front.loadFront(file.contents));
    content = marked(parsed.__content, {
      renderer: newRenderer(file.path, parsed)
    });
    parsed.__content = content;
    return parsed;
  };

  module.exports = {
    parse: parse
  };

}).call(this);
