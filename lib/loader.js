// Generated by CoffeeScript 1.4.0
(function() {
  var cache, extendObj, filelet, front, fs, funclet, jsYaml, loadFile, loadFiles, loglet, markdown, mockquery, parseFile, parseMarkDown, parseYaml, parseYamlFrontMatter, path, transform, _,
    __slice = [].slice;

  path = require('path');

  front = require('yaml-front-matter');

  markdown = require('./markdown');

  jsYaml = require('js-yaml');

  loglet = require('loglet');

  mockquery = require('mockquery');

  _ = require('underscore');

  filelet = require('filelet');

  fs = require('fs');

  funclet = require('funclet');

  parseYamlFrontMatter = function(data) {
    return front.loadFront(data);
  };

  parseMarkDown = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return markdown.parse.apply(markdown, args);
  };

  parseYaml = function(data) {
    return jsYaml.safeLoad(data);
  };

  extendObj = function(file, parsed) {
    var extended;
    if (parsed instanceof Array) {
      return parsed;
    } else if (parsed instanceof Object) {
      extended = _.extend(file.parsed || {}, parsed);
      return extended;
    } else {
      return parsed;
    }
  };

  parseFile = function(file) {
    switch (path.extname(file.path)) {
      case '.md':
        return parseMarkDown(file);
      case '.html':
        return extendObj(file, eparseYamlFrontMatter(file.contents));
      case '.yml':
        return extendObj(file, parseYaml(file.contents));
      case '.json':
        return extendObj(file, JSON.parse(file.contents));
      default:
        throw {
          error: 'invalid_file_type',
          type: path.extname(file.path),
          filePath: file.path,
          file: file
        };
    }
  };

  transform = function(file, cb) {
    var $, parentElt, parsed;
    try {
      parsed = file.parsed = parseFile(file);
      $ = (function() {
        if (file.parsed.__content) {
          return mockquery.load(file.parsed.__content);
        } else if (file.parsed.$) {
          $ = mockquery.fromJSON(parsed.$);
          file.parsed.__content = $($.document).outerHTML();
          delete file.parsed.$;
          return $;
        } else {
          throw {
            error: 'no_content',
            file: file.path
          };
        }
      })();
      parentElt = $('<div />', {
        "class": [file.parsed.template || 'chapter', 'item'].join(' ')
      })[0];
      if ($(':root')[0].isFragment()) {
        $(parentElt).append($(':root').children());
        $.document.documentElement = parentElt;
      }
      file.$ = $;
      return cb(null, file);
    } catch (e) {
      loglet.error('parse.transform:error', e);
      return cb(e);
    }
  };

  cache = filelet.cache();

  loadFile = function(filePath, cb) {
    return cache.loadFile(filePath, transform, cb);
  };

  loadFiles = function(filePaths, cb) {
    return cache.loadFiles(filePaths, transform, cb);
  };

  module.exports = {
    transform: transform,
    parseFile: parseFile,
    loadFile: loadFile,
    loadFiles: loadFiles
  };

}).call(this);
